Цель задания

Научиться создавать классы @Entity со связями для работы с базой данных.

Что нужно сделать

Создайте классы @Entity для всех таблиц базы данных и связи между ними для всей базы данных Skillbox.



Рекомендации

Как выбрать связи?
Изучите каждую таблицу и найдите связи между ними. Например, в таблице Subscriptions есть поле с идентификатором студента (student_id). В классе, связанном с Subscriptions, можно сделать связь @ManyToOne со студентом, а у студента будет @OneToMany. То есть у одного студента может быть много подписок, а у каждой подписки может быть только один студент. Аналогично посмотрите, где и какие связи можно прописать между классами.



Что делать если нет поля id в таблице?
В таблице Subcriptions нет отдельной колонки с привычным идентификатором записи. В роли идентификатора здесь выступает пара student_id и course_id.  Это значит, что пара значений student_id и course_id уникальна для каждой записи.

Связка student_id и course_id называется «составной ключ» (Composite key).

Один из вариантов создания составного ключа — написать отдельный класс, в котором поля будут содержать значения полей, входящих в составной ключ.

На примере класса Subscription:

public class Key implements Serializable {

@Column(name = "student_id")
    private int studentId;

@Column(name = "course_id")
    private int courseId;

 //setters, getters, equals(), hashcode()

}


Класс составного ключа обязан:

быть public;
иметь публичный конструктор по умолчанию;
реализовывать собственные equals(), hashCode(), публичные геттеры и сеттеры;
имплементировать Serializable.
 Используется класс-ключ в @Entity следующим образом:

@Entity
@Table(name = "Subscriptions")
public class Subscription {

  @EmbeddedId
  private Key id;

  @Column(name = "student_id", insertable = false, updatable = false)
  private int studentId;

  @Column(name = "course_id", insertable = false, updatable = false)
  private int courseId;

...


Аннотация @EmbeddedId говорит, что данный параметр является составным ключом.

Если поля ключа использовать и в основном классе @Entity, то необходимо запретить использовать поля для вставки и обновления данных дополнительными параметрами в аннотации @Column.



Для получения объекта из базы данных по составному ключу необходимо в метод get() объекта Session передавать экземпляр составного ключа, например:

Subscription subscription = session.get(Subscription.class, new PK(studentId, courseId));
аналогично и для создания новой записи.



Дополнительные примеры найдёте в статье.
https://easyjava.ru/data/hibernate/pervichnye-klyuchi-v-hibernate/
